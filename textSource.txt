#ifdef VS 
 
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

// Function to convert HSV to RGB
vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
  
    // Dynamic light properties
    vec3 lightPos1 = vec3(5.0 * cos(time), 5.0, 5.0 * sin(time)); // Moving light
    vec3 lightPos2 = vec3(-5.0, 5.0, 5.0); // Static light
    vec3 lightColor = vec3(1.0, 1.0, 1.0); // White light for simplicity

    // Wave-like color movement
    float waveSpeed = 1.0; // Adjust wave speed
    float waveLength = 2.0; // Adjust wave length
    float hue = mod(fPosition.x * waveLength + time * waveSpeed, 1.0);
    vec3 intrinsicColor = hsv2rgb(vec3(hue, 1.0, 1.0));

    // Calculate lighting
    vec3 norm = normalize(fNormal);
    vec3 lightDir1 = normalize(lightPos1 - fPosition);
    vec3 lightDir2 = normalize(lightPos2 - fPosition);

    // Diffuse reflection
    float diff1 = max(dot(norm, lightDir1), 0.0);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse = (diff1 + diff2) * lightColor * intrinsicColor;

    // Specular reflection
    float specularStrength = 0.5;
    vec3 viewDir = normalize(-fPosition);
    vec3 reflectDir1 = reflect(-lightDir1, norm);
    vec3 reflectDir2 = reflect(-lightDir2, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), 32.0);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), 32.0);
    vec3 specular = specularStrength * (spec1 + spec2) * vec3(1.0, 1.0, 1.0);

    // Combine results
    vec3 finalColor = diffuse + specular;

    gl_FragColor = vec4(finalColor, 1.0);
}
 
#else 
 
precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

// Function to convert HSV to RGB
vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
  
    // Dynamic light properties
    vec3 lightPos1 = vec3(5.0 * cos(time), 5.0, 5.0 * sin(time)); // Moving light
    vec3 lightPos2 = vec3(-5.0, 5.0, 5.0); // Static light
    vec3 lightColor = vec3(1.0, 1.0, 1.0); // White light for simplicity

    // Wave-like color movement
    float waveSpeed = 1.0; // Adjust wave speed
    float waveLength = 2.0; // Adjust wave length
    float hue = mod(fPosition.x * waveLength + time * waveSpeed, 1.0);
    vec3 intrinsicColor = hsv2rgb(vec3(hue, 1.0, 1.0));

    // Calculate lighting
    vec3 norm = normalize(fNormal);
    vec3 lightDir1 = normalize(lightPos1 - fPosition);
    vec3 lightDir2 = normalize(lightPos2 - fPosition);

    // Diffuse reflection
    float diff1 = max(dot(norm, lightDir1), 0.0);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse = (diff1 + diff2) * lightColor * intrinsicColor;

    // Specular reflection
    float specularStrength = 0.5;
    vec3 viewDir = normalize(-fPosition);
    vec3 reflectDir1 = reflect(-lightDir1, norm);
    vec3 reflectDir2 = reflect(-lightDir2, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), 32.0);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), 32.0);
    vec3 specular = specularStrength * (spec1 + spec2) * vec3(1.0, 1.0, 1.0);

    // Combine results
    vec3 finalColor = diffuse + specular;

    gl_FragColor = vec4(finalColor, 1.0);
}
 
#endif